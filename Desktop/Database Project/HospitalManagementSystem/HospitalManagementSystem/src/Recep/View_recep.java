/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Recep;
import Connector.ConnectorClass;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Mahin
 */
public class View_recep extends javax.swing.JFrame {

    /**
     * Creates new form View_recep
     */
    public View_recep() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Select One :");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 35, -1, -1));

        jComboBox1.setBackground(new java.awt.Color(255, 0, 0));
        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Show all data", "search by id", "name", "age", "blood_group", "phone", "doctor_id", "nurse_id", "cabin_id", "disease_id" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 120, 30));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("Patient Details");
        jLabel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 110, 21));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Operator");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        jComboBox2.setBackground(new java.awt.Color(255, 0, 0));
        jComboBox2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "like", "not like", "greater than", "less than" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 120, 30));

        jButton1.setBackground(new java.awt.Color(153, 153, 153));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 102, 255));
        jButton1.setText("Enter");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 83, 90, 30));

        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 0, 0));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 82, 228, 30));

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        jTable1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Age", "Blood_Group", "Phone", "Doctor_Id", "Nurse_Id", "Cabin_Id", "Disease_Id", "Discharge"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 150, 880, 275));

        jButton2.setBackground(new java.awt.Color(153, 153, 153));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 0, 0));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recep/close Jframe.png"))); // NOI18N
        jButton2.setText("Exit");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 460, 97, 31));

        clear.setBackground(new java.awt.Color(153, 153, 153));
        clear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        clear.setForeground(new java.awt.Color(0, 102, 204));
        clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recep/Reset.png"))); // NOI18N
        clear.setText("Reset");
        clear.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        getContentPane().add(clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 460, 100, 31));

        jButton3.setBackground(new java.awt.Color(153, 153, 153));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 153, 0));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recep/rsz_1rsz_1rsz_1rsz_2rsz_1rsz_1rsz_1images_6.jpg"))); // NOI18N
        jButton3.setText("Update");
        jButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 460, 104, 31));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recep/photo-1587370560942-ad2a04eabb6d.jpg"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 510));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        int selected = jComboBox1.getSelectedIndex();
        int sel = jComboBox2.getSelectedIndex();
        String text = jTextField1.getText();

        try {
            Connection connection = ConnectorClass.getcon();
            //all
            if (selected == 0) {
                String sqlShow = "select *from Patient";
                Statement statementToShow = connection.createStatement();
                ResultSet result = statementToShow.executeQuery(sqlShow);
                while (result.next()) {
                    int patientID = result.getInt("patient_id");
                    String patientName = result.getString("patient_name");
                    int patientAge = result.getInt("patient_age");
                    String bloodGroup = result.getString("patient_blood_group");
                    String phone = result.getString("patient_phone");
                    int doctorID = result.getInt("patient_doctor_id");
                    int nurseID = result.getInt("patient_nurse_id");
                    int cabinID = result.getInt("patient_cabin_id");
                    int patientDiseaseId = result.getInt("patient_disease_id");
                    String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                }

            }
            //id
            if (selected == 1) {
                if (sel == 0) {
                    String sqlShow = "select *from Patient where patient_id = '" + text + "'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                       String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 1) {
                    String sqlShow = "select *from Patient where patient_id like '%" + text + "%'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                       String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 2) {
                    String sqlShow = "select *from Doctor where patient_id not like '%" + text + "%'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                       String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 3) {
                    String sqlShow = "select *from Patient where patient_id > '" + text + "'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                        String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 4) {
                    String sqlShow = "select *from patient where patient_id < '" + text + "'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                      String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
            }
            //name
            if (selected == 2) {
                if (sel == 0) {
                    String sqlShow = "select *from Patient where patient_name = '" + text + "'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                        String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 1) {
                    String sqlShow = "select *from Patient where patient_name like '%" + text + "%'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                      String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 2) {
                    String sqlShow = "select *from Patient where patient_name not like '%" + text + "%'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                        String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
            }
            //age
            if (selected == 3) {
                if (sel == 0) {
                    String sqlShow = "select *from Patient where patient_age = '" + text + "'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                        String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 1) {
                    String sqlShow = "select *from Patient where patient_age like '%" + text + "%'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                        String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 2) {
                    String sqlShow = "select *from Patient where patient_age not like '%" + text + "%'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                        String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 3) {
                    String sqlShow = "select *from Patient where patient_age > '" + text + "'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                        String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 4) {
                    String sqlShow = "select *from patient where patient_age < '" + text + "'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                        String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
            }
            //blood_group
            if (selected == 4) {
                if (sel == 0) {
                    String sqlShow = "select *from Patient where patient_blood_group = '" + text + "'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                      String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 1) {
                    String sqlShow = "select *from Patient where patient_blood_group like '%" + text + "%'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                       String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 2) {
                    String sqlShow = "select *from Patient where patient_blood_group not like '%" + text + "%'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                       String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
            }
            //phone
            if (selected == 5) {
                if (sel == 0) {
                    String sqlShow = "select *from Patient where patient_phone = '" + text + "'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                        String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 1) {
                    String sqlShow = "select *from Patient where patient_phone like '%" + text + "%'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                       String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                if (sel == 2) {
                    String sqlShow = "select *from Patient where patient_phone not like '%" + text + "%'";
                    Statement statementToShow = connection.createStatement();
                    ResultSet result = statementToShow.executeQuery(sqlShow);
                    while (result.next()) {
                        int patientID = result.getInt("patient_id");
                        String patientName = result.getString("patient_name");
                        int patientAge = result.getInt("patient_age");
                        String bloodGroup = result.getString("patient_blood_group");
                        String phone = result.getString("patient_phone");
                        int doctorID = result.getInt("patient_doctor_id");
                        int nurseID = result.getInt("patient_nurse_id");
                        int cabinID = result.getInt("patient_cabin_id");
                        int patientDiseaseId = result.getInt("patient_disease_id");

                       String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                    }
                }
                //patient_doctor_id
                if (selected == 6) {
                    if (sel == 0) {
                        String sqlShow = "select *from Patient where patient_doctor_id = '" + text + "'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                            String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 1) {
                        String sqlShow = "select *from Patient where patient_doctor_id like '%" + text + "%'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                           String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 2) {
                        String sqlShow = "select *from Patient where patient_doctor_id not like '%" + text + "%'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                           String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 3) {
                        String sqlShow = "select *from Patient where patient_doctor_id > '" + text + "'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                           String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 4) {
                        String sqlShow = "select *from patient where patient_doctor_id < '" + text + "'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                           String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                }
                //patient_nurse_id
                if (selected == 7) {
                    if (sel == 0) {
                        String sqlShow = "select *from Patient where patient_nurse_id = '" + text + "'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                          String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 1) {
                        String sqlShow = "select *from Patient where patient_nurse_id like '%" + text + "%'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                            String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 2) {
                        String sqlShow = "select *from Patient where patient_nurse_id not like '%" + text + "%'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                          String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 3) {
                        String sqlShow = "select *from Patient where patient_nurse_id > '" + text + "'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                            String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 4) {
                        String sqlShow = "select *from patient where patient_nurse_id < '" + text + "'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                            String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                }
                //patient_cabin_id
                if (selected == 8) {
                    if (sel == 0) {
                        String sqlShow = "select *from Patient where patient_cabin_id = '" + text + "'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                            String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 1) {
                        String sqlShow = "select *from Patient where patient_cabin_id like '%" + text + "%'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                            String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 2) {
                        String sqlShow = "select *from Patient where patient_cabin_id not like '%" + text + "%'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                           String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 3) {
                        String sqlShow = "select *from Patient where patient_cabin_id > '" + text + "'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                           String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 4) {
                        String sqlShow = "select *from patient where patient_cabin_id < '" + text + "'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                           String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                }
                //patient_diease_id
                if (selected == 9) {
                    if (sel == 0) {
                        String sqlShow = "select *from Patient where patient_disease_id = '" + text + "'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                            String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 1) {
                        String sqlShow = "select *from Patient where patient_disease_id like '%" + text + "%'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                            String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 2) {
                        String sqlShow = "select *from Patient where patient_disease_id not like '%" + text + "%'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                           String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 3) {
                        String sqlShow = "select *from Patient where patient_disease_id > '" + text + "'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                            String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                    if (sel == 4) {
                        String sqlShow = "select *from patient where patient_disease_id < '" + text + "'";
                        Statement statementToShow = connection.createStatement();
                        ResultSet result = statementToShow.executeQuery(sqlShow);
                        while (result.next()) {
                            int patientID = result.getInt("patient_id");
                            String patientName = result.getString("patient_name");
                            int patientAge = result.getInt("patient_age");
                            String bloodGroup = result.getString("patient_blood_group");
                            String phone = result.getString("patient_phone");
                            int doctorID = result.getInt("patient_doctor_id");
                            int nurseID = result.getInt("patient_nurse_id");
                            int cabinID = result.getInt("patient_cabin_id");
                            int patientDiseaseId = result.getInt("patient_disease_id");

                            String def = result.getString("patient_discharge");

                   
                    model.addRow(new Object[]{patientID, patientName, patientAge, bloodGroup, phone, doctorID, nurseID, cabinID, patientDiseaseId,def});
                        }
                    }
                }
            }

        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            Homepage_recep open= new Homepage_recep();
            setVisible(false);
            open.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_clearActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       int row = jTable1.getSelectedRow();
       String value1 = jTable1.getModel().getValueAt(row, 9).toString(); 
       String value2 = jTable1.getModel().getValueAt(row, 0).toString(); 
       String value3 = jTable1.getModel().getValueAt(row, 1).toString();
       String value4 = jTable1.getModel().getValueAt(row, 2).toString();
       String value5 = jTable1.getModel().getValueAt(row, 3).toString();
       String value6 = jTable1.getModel().getValueAt(row, 4).toString();
       String value7 = jTable1.getModel().getValueAt(row, 5).toString();
       String value8 = jTable1.getModel().getValueAt(row, 6).toString();
       String value9 = jTable1.getModel().getValueAt(row, 7).toString();
       String value10 = jTable1.getModel().getValueAt(row, 8).toString();
       String update = "update Patient set patient_discharge='"+value1+"',patient_name='"+value3+"',patient_age='"+value4+"',patient_blood_group='"+value5+"',patient_phone='"+value6+"',patient_doctor_id='"+value7+"',patient_nurse_id='"+value8+"',patient_cabin_id='"+value9+"',patient_disease_id='"+value10+"' where patient_id = '"+value2+"'";
       try{
           Connection connection= ConnectorClass.getcon();
           Statement statementToShow = connection.createStatement();
           statementToShow.executeUpdate(update);
          
           JOptionPane.showMessageDialog(null,"Updated");
           
       }catch(Exception e)
       {
           
       }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View_recep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View_recep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View_recep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View_recep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View_recep().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
