/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Admin;

import Connector.ConnectorClass;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mahin
 */
public class Cabin_admin extends javax.swing.JFrame {

    /**
     * Creates new form Cabin_admin
     */
    public Cabin_admin() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 0, 0));
        jLabel2.setText("Cabin");
        jLabel2.setAlignmentX(3.0F);
        jLabel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Select One :");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 48, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Operator :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 89, 70, 31));

        jComboBox2.setBackground(new java.awt.Color(255, 0, 0));
        jComboBox2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "like", "not like", "greater than", "less than" }));
        jComboBox2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 89, 226, -1));

        jComboBox1.setBackground(new java.awt.Color(255, 0, 0));
        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Show all data", "search by id", "type" }));
        jComboBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(98, 45, 226, -1));

        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 0, 0));
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(329, 89, 180, -1));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 102, 204));
        jButton1.setText("ENTER");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 40, 100, 40));

        clear.setBackground(new java.awt.Color(153, 153, 153));
        clear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        clear.setForeground(new java.awt.Color(0, 102, 204));
        clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Admin/Reset.png"))); // NOI18N
        clear.setText("Reset");
        clear.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        getContentPane().add(clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 430, 87, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 500, 199));

        jButton2.setBackground(new java.awt.Color(153, 153, 153));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 0, 0));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Admin/delete.png"))); // NOI18N
        jButton2.setText("Delete");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 430, 85, -1));

        jButton3.setBackground(new java.awt.Color(153, 153, 153));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 102, 153));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Admin/rsz_1rsz_1rsz_1rsz_2rsz_1rsz_1rsz_1images_6.jpg"))); // NOI18N
        jButton3.setText("Update");
        jButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 430, 88, 27));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Ascending sort :");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 149, 95, -1));

        jComboBox3.setBackground(new java.awt.Color(255, 51, 0));
        jComboBox3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "id", "type" }));
        jComboBox3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 136, 110, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Descending sort :");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 150, -1, -1));

        jComboBox4.setBackground(new java.awt.Color(255, 51, 0));
        jComboBox4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "id", "type" }));
        jComboBox4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jComboBox4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 140, 110, 30));

        jButton4.setBackground(new java.awt.Color(153, 153, 153));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 0, 0));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Admin/close Jframe.png"))); // NOI18N
        jButton4.setText("Exit");
        jButton4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 430, 85, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Admin/photo-1587370560942-ad2a04eabb6d.jpg"))); // NOI18N
        jLabel7.setText("jLabel7");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 530, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_clearActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
       model.setRowCount(0);
        
        int selected =  jComboBox1.getSelectedIndex();
       int sel = jComboBox2.getSelectedIndex();
       String text = jTextField1.getText();
       try{
           Connection connection= ConnectorClass.getcon();
            //all
           if(selected==0)
           {
               String sqlShow = "select *from Cabin";
               Statement statementToShow = connection.createStatement();
               ResultSet result = statementToShow.executeQuery(sqlShow);
               while(result.next())
               {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
               }
               
           }
           //id
           if(selected==1)
           {
               if(sel==0)
               {
                  String sqlShow = "select *from Cabin where cabin_id = '"+text+"'";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==1)
               {
                  String sqlShow = "select *from Cabin where cabin_id like '%"+text+"%'";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                 
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==2)
               {
                  String sqlShow = "select *from Cabin where cabin_id not like '%"+text+"%'";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                    int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                  
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==3)
               {
                  String sqlShow = "select *from Cabin where cabin_id > '"+text+"'";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                  int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==4)
               {
                  String sqlShow = "select *from Cabin where cabin_id < '"+text+"'";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                  int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                  
                   model.addRow(new Object[]{ID, type});
                  }
               }
           }
           //type
           if(selected==2)
           {
               if(sel==0)
               {
                  String sqlShow = "select *from Cabin where cabin_type = '"+text+"'";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                     int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==1)
               {
                  String sqlShow = "select *from Cabin where cabin_type like '%"+text+"%'";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                    int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==2)
               {
                  String sqlShow = "select *from Cabin where cabin_type not like '%"+text+"%'";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                 
                   model.addRow(new Object[]{ID, type});
                  }
               }
           }
       }catch(Exception e)
       {
           
       }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int row = jTable1.getSelectedRow();
        String value = jTable1.getModel().getValueAt(row, 0).toString();
        String del = "delete from Cabin where cabin_id = '"+value+"'";
        try{
            Connection connection= ConnectorClass.getcon();
            Statement statementToShow = connection.createStatement();
            statementToShow.executeUpdate(del);
            JOptionPane.showMessageDialog(null,"Deleted");
        }catch(Exception e)
        {

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int row = jTable1.getSelectedRow();
        String value1 = jTable1.getModel().getValueAt(row, 0).toString();
        String value2 = jTable1.getModel().getValueAt(row, 1).toString();
    

        String update = "update Cabin set cabin_type='"+value2+"' where cabin_id = '"+value1+"'";
        try{
            Connection connection= ConnectorClass.getcon();
            Statement statementToShow = connection.createStatement();
            statementToShow.executeUpdate(update);
           
            JOptionPane.showMessageDialog(null,"Updated");

        }catch(Exception e)
        {

        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
         DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selected =  jComboBox1.getSelectedIndex();
       int sel = jComboBox2.getSelectedIndex();
       int sel2 = jComboBox3.getSelectedIndex();
       String text = jTextField1.getText();
       if(sel2!=0)
       {
           
           model.setRowCount(0);
       }
       
       try{
           Connection connection= ConnectorClass.getcon();
           
//1
        if(sel2==1)
        {
             //all
           if(selected==0)
           {
               String sqlShow = "select *from Cabin order by cabin_id";
               Statement statementToShow = connection.createStatement();
               ResultSet result = statementToShow.executeQuery(sqlShow);
               while(result.next())
               {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
               }
               
           }
           //id
           if(selected==1)
           {
               if(sel==0)
               {
                  String sqlShow = "select *from Cabin where cabin_id = '"+text+"' order by cabin_id";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==1)
               {
                  String sqlShow = "select *from Cabin where cabin_id like '%"+text+"%' order by cabin_id";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                 
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==2)
               {
                  String sqlShow = "select *from Cabin where cabin_id not like '%"+text+"%' order by cabin_id";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                    int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                  
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==3)
               {
                  String sqlShow = "select *from Cabin where cabin_id > '"+text+"' order by cabin_id";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                  int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==4)
               {
                  String sqlShow = "select *from Cabin where cabin_id < '"+text+"' order by cabin_id";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                  int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                  
                   model.addRow(new Object[]{ID, type});
                  }
               }
           }
           //type
           if(selected==2)
           {
               if(sel==0)
               {
                  String sqlShow = "select *from Cabin where cabin_type = '"+text+"' order by cabin_id";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                     int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==1)
               {
                  String sqlShow = "select *from Cabin where cabin_type like '%"+text+"%' order by cabin_id";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                    int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==2)
               {
                  String sqlShow = "select *from Cabin where cabin_type not like '%"+text+"%' order by cabin_id";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                 
                   model.addRow(new Object[]{ID, type});
                  }
               }
           }
        }
//2
        if(sel2==2)
        {
             //all
           if(selected==0)
           {
               String sqlShow = "select *from Cabin order by cabin_type";
               Statement statementToShow = connection.createStatement();
               ResultSet result = statementToShow.executeQuery(sqlShow);
               while(result.next())
               {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
               }
               
           }
           //id
           if(selected==1)
           {
               if(sel==0)
               {
                  String sqlShow = "select *from Cabin where cabin_id = '"+text+"' order by cabin_type";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==1)
               {
                  String sqlShow = "select *from Cabin where cabin_id like '%"+text+"%' order by cabin_type";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                 
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==2)
               {
                  String sqlShow = "select *from Cabin where cabin_id not like '%"+text+"%' order by cabin_type";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                    int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                  
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==3)
               {
                  String sqlShow = "select *from Cabin where cabin_id > '"+text+"' order by cabin_type";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                  int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==4)
               {
                  String sqlShow = "select *from Cabin where cabin_id < '"+text+"' order by cabin_type";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                  int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                  
                   model.addRow(new Object[]{ID, type});
                  }
               }
           }
           //type
           if(selected==2)
           {
               if(sel==0)
               {
                  String sqlShow = "select *from Cabin where cabin_type = '"+text+"' order by cabin_type";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                     int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==1)
               {
                  String sqlShow = "select *from Cabin where cabin_type like '%"+text+"%' order by cabin_type";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                    int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==2)
               {
                  String sqlShow = "select *from Cabin where cabin_type not like '%"+text+"%' order by cabin_type";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                 
                   model.addRow(new Object[]{ID, type});
                  }
               }
           }
        }        
           
       }catch(Exception e)
       {
           
       }
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
         DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selected =  jComboBox1.getSelectedIndex();
       int sel = jComboBox2.getSelectedIndex();
       int sel2 = jComboBox4.getSelectedIndex();
       String text = jTextField1.getText();
       if(sel2!=0)
       {
           
           model.setRowCount(0);
       }
       
       try{
           Connection connection= ConnectorClass.getcon();
           
//1
        if(sel2==1)
        {
             //all
           if(selected==0)
           {
               String sqlShow = "select *from Cabin order by cabin_id desc";
               Statement statementToShow = connection.createStatement();
               ResultSet result = statementToShow.executeQuery(sqlShow);
               while(result.next())
               {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
               }
               
           }
           //id
           if(selected==1)
           {
               if(sel==0)
               {
                  String sqlShow = "select *from Cabin where cabin_id = '"+text+"' order by cabin_id desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==1)
               {
                  String sqlShow = "select *from Cabin where cabin_id like '%"+text+"%' order by cabin_id desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                 
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==2)
               {
                  String sqlShow = "select *from Cabin where cabin_id not like '%"+text+"%' order by cabin_id desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                    int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                  
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==3)
               {
                  String sqlShow = "select *from Cabin where cabin_id > '"+text+"' order by cabin_id desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                  int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==4)
               {
                  String sqlShow = "select *from Cabin where cabin_id < '"+text+"' order by cabin_id desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                  int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                  
                   model.addRow(new Object[]{ID, type});
                  }
               }
           }
           //type
           if(selected==2)
           {
               if(sel==0)
               {
                  String sqlShow = "select *from Cabin where cabin_type = '"+text+"' order by cabin_id desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                     int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==1)
               {
                  String sqlShow = "select *from Cabin where cabin_type like '%"+text+"%' order by cabin_id desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                    int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==2)
               {
                  String sqlShow = "select *from Cabin where cabin_type not like '%"+text+"%' order by cabin_id desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                 
                   model.addRow(new Object[]{ID, type});
                  }
               }
           }
        }
//2
        if(sel2==2)
        {
             //all
           if(selected==0)
           {
               String sqlShow = "select *from Cabin order by cabin_type desc";
               Statement statementToShow = connection.createStatement();
               ResultSet result = statementToShow.executeQuery(sqlShow);
               while(result.next())
               {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
               }
               
           }
           //id
           if(selected==1)
           {
               if(sel==0)
               {
                  String sqlShow = "select *from Cabin where cabin_id = '"+text+"' order by cabin_type desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==1)
               {
                  String sqlShow = "select *from Cabin where cabin_id like '%"+text+"%' order by cabin_type desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                 
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==2)
               {
                  String sqlShow = "select *from Cabin where cabin_id not like '%"+text+"%' order by cabin_type desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                    int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                  
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==3)
               {
                  String sqlShow = "select *from Cabin where cabin_id > '"+text+"' order by cabin_type desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                  int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==4)
               {
                  String sqlShow = "select *from Cabin where cabin_id < '"+text+"' order by cabin_type desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                  int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                  
                   model.addRow(new Object[]{ID, type});
                  }
               }
           }
           //type
           if(selected==2)
           {
               if(sel==0)
               {
                  String sqlShow = "select *from Cabin where cabin_type = '"+text+"' order by cabin_type desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                     int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==1)
               {
                  String sqlShow = "select *from Cabin where cabin_type like '%"+text+"%' order by cabin_type desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                    int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                   
                   model.addRow(new Object[]{ID, type});
                  }
               }
               if(sel==2)
               {
                  String sqlShow = "select *from Cabin where cabin_type not like '%"+text+"%' order by cabin_type desc";
                  Statement statementToShow = connection.createStatement();
                  ResultSet result = statementToShow.executeQuery(sqlShow);
                  while(result.next())
                  {    
                   int ID = result.getInt("cabin_id");
                   String type = result.getString("cabin_type");
                   
                   
                   
                  
                 
                   model.addRow(new Object[]{ID, type});
                  }
               }
           }
        }        
           
       }catch(Exception e)
       {
           
       }
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        View_admin obj = new View_admin();
        setVisible(false);
        obj.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cabin_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cabin_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cabin_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cabin_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cabin_admin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
